{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RionID Usage Guide","text":"<p><code>rionid</code> is a Python code that simulates the time-of-flight (ToF) spectrum of particles in a storage ring. Here is a guide on how to use pySimToF:</p>"},{"location":"#installation","title":"Installation","text":"<ul> <li> <p>Download and install Barion from @Xaratustrah, LISEreader from @gwgwhc and PyROOT</p> </li> <li> <p>Download or clone the <code>pySimToF</code> repository:   <pre><code>  git clone https://github.com/DFreireF/pysimtof.git\n</code></pre></p> </li> <li>Then in the cloned directory:    <pre><code>  pip install .\n</code></pre></li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Navigate to the directory containing the <code>rionid</code> code in your terminal. Run <code>python __main__.py [arguments]</code>, replacing <code>[arguments]</code> with the desired arguments (detailed below).</p>"},{"location":"#arguments","title":"Arguments","text":"<p>The following arguments are available for use with <code>rionid</code>:</p>"},{"location":"#main-arguments","title":"Main Arguments","text":"<ul> <li><code>datafile</code> (required): Name of the input file with data. Can also be a list of files in a txt file.</li> <li><code>alphap</code>: Momentum compaction factor of the ring.</li> <li><code>refion</code>: Reference ion with format NucleonsNameChargestate := AAXX+CC. Example: 72Ge+35, 1H+1, 238U+92...</li> <li><code>filep</code>: Read list of particles to simulate. LISE file or something else.</li> </ul>"},{"location":"#secondary-arguments","title":"Secondary Arguments","text":"<ul> <li><code>harmonics</code>: Harmonics to simulate.</li> </ul>"},{"location":"#arguments-for-each-mode-exclusive","title":"Arguments for Each Mode (Exclusive)","text":"<ul> <li><code>brho</code>: Brho value of the reference nucleus at ESR (isochronous mode).</li> <li><code>kenergy</code>: Kinetic energy of reference nucleus at ESR (isochronous mode).</li> <li><code>gamma</code>: Lorentz factor gamma of the reference particle.</li> <li><code>fref</code>: Revolution frequency of the reference particle (standard mode).</li> </ul>"},{"location":"#arguments-for-visualization","title":"Arguments for Visualization","text":"<ul> <li><code>ndivs</code>: Number of divisions in the display.</li> <li><code>amplitude</code>: Display of srf data options. 0 -&gt; constant height, else-&gt;scaled.</li> </ul>"},{"location":"#actions","title":"Actions","text":"<ul> <li><code>log</code>: Set the logging level.</li> <li><code>show</code>: Show display. If not, save root file and close display.</li> <li><code>outdir</code>: Output directory.</li> <li><code>correct</code>: Correct simulated spectrum following a polynomial fit with paremeters given here.</li> </ul>"},{"location":"#example-usage-dummy-example","title":"Example Usage: Dummy example","text":"<pre><code>    python __main__.py datafile.txt -f 11.2452 -r 209Bi+83 -psim datafile.psim -b 5.5 -d 8 -am 1 -s -o output_folder -c 1 2 3\n</code></pre> <p>This command would run <code>rionid</code> on the <code>datafile.txt</code> input file, using the standard mode with a <code>reference frequency</code> of 11.2452, a <code>reference ion</code> of <code>209Bi+83</code>, a particle input file of <code>datafile.psim</code>, a <code>brho</code> value of <code>5.5</code>, and displaying the data with <code>8 divisions</code>, <code>scaled amplitude</code>, and showing the display. The output files would be saved in the <code>output_folder directory</code>, and the <code>simulated spectrum</code> would be <code>corrected</code> using the polynomial fit parameters 1, 2, and 3.</p>"},{"location":"__main__/","title":"__main__","text":""},{"location":"__main__/#summary-of-python-code-controller-mainpy-documentation","title":"Summary of Python Code: Controller (main.py) Documentation","text":"<p>The provided Python code defines the main controller module for the rionid application. It is responsible for handling command-line arguments, parsing data files, and coordinating the flow of data between the <code>ImportData</code> class and the <code>CreateGUI</code> class. The controller also facilitates the visualization and saving of simulation results.</p>"},{"location":"__main__/#function-main","title":"Function: <code>main()</code>","text":"<p>This function is the entry point of the application and is called when the script is executed. It parses command-line arguments using <code>argparse</code> and then delegates tasks to the <code>controller()</code> function based on the provided arguments.</p>"},{"location":"__main__/#function-controllerdata_file-particles_to_simulate-alphap-ref_ion-ndivs-amplitude-show-brhonone-frefnone-kenone-outnone-harmonicsnone-gamnone-correctnone-odsfalse","title":"Function: <code>controller(data_file, particles_to_simulate, alphap, ref_ion, ndivs, amplitude, show, brho=None, fref=None, ke=None, out=None, harmonics=None, gam=None, correct=None, ods=False)</code>","text":"<p>This function coordinates the data flow between the <code>ImportData</code> class and the <code>CreateGUI</code> class to perform the simulations, visualize the results, and save them if required.</p>"},{"location":"__main__/#parameters","title":"Parameters:","text":"<ul> <li><code>data_file</code>: A string representing the name of the input file with data.</li> <li><code>particles_to_simulate</code>: A string representing the name of the file containing the list of particles to simulate or LISE file.</li> <li><code>alphap</code>: A floating-point number representing the momentum compaction factor of the ring.</li> <li><code>ref_ion</code>: A string representing the reference ion in the format \"NucleonsNameChargestate := AAXX+CC\" (e.g., \"72Ge+35\", \"1H+1\", \"238U+92\").</li> <li><code>ndivs</code>: An integer representing the number of divisions in the display.</li> <li><code>amplitude</code>: An integer representing the display of SRF data options. If 0, it indicates constant height; otherwise, it is scaled.</li> <li><code>show</code>: A boolean indicating whether to show the display. If not, the root file is saved, and the display is closed.</li> <li><code>brho</code>: (optional) A floating-point number representing the Brho value of the reference nucleus at ESR (isochronous mode).</li> <li><code>fref</code>: (optional) A floating-point number representing the revolution frequency of the reference particle (standard mode).</li> <li><code>ke</code>: (optional) A floating-point number representing the kinetic energy of the reference nucleus at ESR (isochronous mode).</li> <li><code>out</code>: (optional) A string representing the output directory where the results will be saved.</li> <li><code>harmonics</code>: (optional) A list of floating-point numbers representing the harmonics to simulate.</li> <li><code>gam</code>: (optional) A floating-point number representing the Lorentz gamma factor of the reference particle.</li> <li><code>correct</code>: (optional) A list of floating-point numbers representing the polynomial coefficients for correcting the simulated frequencies.</li> <li><code>ods</code>: (optional) A boolean indicating whether to write the simulated data to an OpenDocument Spreadsheet (ODS).</li> </ul>"},{"location":"__main__/#steps","title":"Steps:","text":"<ol> <li>Initializes the <code>ImportData</code> object, passing the provided <code>ref_ion</code>, <code>alphap</code>, and <code>data_file</code> as parameters.</li> <li>Sets the particles to simulate by calling the <code>_set_particles_to_simulate_from_file()</code> method of <code>ImportData</code>.</li> <li>Calculates the mass over charge (moq) values for the particles using the <code>_calculate_moqs()</code> method of <code>ImportData</code>.</li> <li>Calculates the simulated relative revolution frequencies (SRRF) using the <code>_calculate_srrf()</code> method of <code>ImportData</code>.</li> <li>Simulates the measured frequency and expected yield for each harmonic using the <code>_simulated_data()</code> method of <code>ImportData</code>.</li> <li>Calls the <code>CreateGUI</code> class to create the graphical user interface for displaying the simulation results.</li> <li>Calls the <code>_view()</code> method of <code>CreateGUI</code> to display the experimental and simulated data.</li> <li>If <code>ods</code> is <code>True</code>, writes the simulated data to an OpenDocument Spreadsheet using the <code>write_arrays_to_ods()</code> function.</li> </ol>"},{"location":"__main__/#function-read_masterfilemaster_filename","title":"Function: <code>read_masterfile(master_filename)</code>","text":"<p>This function reads a master file that contains a list of filenames with experiment data. It returns a list of the filenames.</p>"},{"location":"__main__/#parameter","title":"Parameter:","text":"<ul> <li><code>master_filename</code>: A string representing the name of the master file containing the list of filenames.</li> </ul>"},{"location":"__main__/#returns","title":"Returns:","text":"<ul> <li>A list of strings representing the filenames with experiment data.</li> </ul>"},{"location":"__main__/#function-write_arrays_to_odsfile_name-sheet_name-names-arrays","title":"Function: <code>write_arrays_to_ods(file_name, sheet_name, names, *arrays)</code>","text":"<p>This function writes data arrays to an OpenDocument Spreadsheet (ODS) file.</p>"},{"location":"__main__/#parameters_1","title":"Parameters:","text":"<ul> <li><code>file_name</code>: A string representing the name of the ODS file to be created.</li> <li><code>sheet_name</code>: A string representing the name of the sheet in the ODS file where the data will be written.</li> <li><code>names</code>: A list of strings representing the column names in the sheet.</li> <li><code>*arrays</code>: A variable number of arrays containing the data to be written to the ODS file.</li> </ul>"},{"location":"creategui/","title":"creategui","text":""},{"location":"creategui/#creategui-class-documentation","title":"CreateGUI Class Documentation","text":"<p>The provided Python code defines a class <code>CreateGUI</code> that implements the View component of the Model-View-Controller (MVC) design pattern. It is designed to visualize and analyze Schottky spectra data using ROOT (a data analysis framework) in combination with other Python modules (<code>barion.patternfinder</code>, <code>pysimtof.pypeaks</code>, and <code>pysimtof.importdata</code>).</p>"},{"location":"creategui/#class-creategui","title":"Class: CreateGUI","text":""},{"location":"creategui/#constructor","title":"Constructor:","text":"<ul> <li><code>__init__(self, ref_ion, ion_names, ndivs, yield_option, show)</code>: Constructor to initialize the CreateGUI object.</li> <li>Parameters:<ul> <li><code>ref_ion</code>: A string representing the reference ion.</li> <li><code>ion_names</code>: A list of strings containing names of ions corresponding to the experimental data.</li> <li><code>ndivs</code>: An integer specifying the number of divisions for displaying histograms.</li> <li><code>yield_option</code>: An integer representing the yield option.</li> <li><code>show</code>: A boolean value indicating whether to display the GUI or save the output to a file.</li> </ul> </li> </ul>"},{"location":"creategui/#methods","title":"Methods:","text":"<ol> <li><code>_view(self, exp_data, simulated_data_dict, filename='Spectrum', out='')</code>: Visualizes the data by creating and customizing the GUI elements, such as canvas, histograms, stack, and legends.</li> <li>Parameters:<ul> <li><code>exp_data</code>: A numpy array representing experimental data.</li> <li><code>simulated_data_dict</code>: A dictionary containing simulated data for various keys.</li> <li><code>filename</code>: A string representing the base filename to save the output.</li> <li><code>out</code>: A string representing the output path.</li> </ul> </li> <li> <p>Returns: None</p> </li> <li> <p><code>create_canvas(self)</code>: Creates and initializes the main and peaks canvas for plotting histograms.</p> </li> <li>Parameters: None</li> <li> <p>Returns: None</p> </li> <li> <p><code>create_histograms(self, exp_data, simulated_data_dict, filename)</code>: Creates histograms for experimental and simulated data.</p> </li> <li>Parameters:<ul> <li><code>exp_data</code>: A numpy array representing experimental data.</li> <li><code>simulated_data_dict</code>: A dictionary containing simulated data for various keys.</li> <li><code>filename</code>: A string representing the base filename.</li> </ul> </li> <li> <p>Returns: None</p> </li> <li> <p><code>histogram_fill(self)</code>: Fills the histograms with the corresponding data values.</p> </li> <li>Parameters: None</li> <li> <p>Returns: None</p> </li> <li> <p><code>set_xranges(self)</code>: Sets the x-axis ranges for dividing the histograms.</p> </li> <li>Parameters: None</li> <li> <p>Returns: None</p> </li> <li> <p><code>set_yscales(self)</code>: Sets the y-axis scales for the histograms and normalizes simulated data.</p> </li> <li>Parameters: None</li> <li> <p>Returns: None</p> </li> <li> <p><code>create_stack(self, simulated_data_dict)</code>: Creates a stack of histograms for simulated data.</p> </li> <li>Parameters:<ul> <li><code>simulated_data_dict</code>: A dictionary containing simulated data for various keys.</li> </ul> </li> <li> <p>Returns: None</p> </li> <li> <p><code>set_xy_ranges(self, stack, rang)</code>: Sets the x and y-axis ranges for the stack of histograms.</p> </li> <li>Parameters:<ul> <li><code>stack</code>: The stack name.</li> <li><code>rang</code>: A tuple containing the minimum and maximum values for the x and y-axes.</li> </ul> </li> <li> <p>Returns: None</p> </li> <li> <p><code>draw_histograms(self)</code>: Draws the histograms, stack, and labels on the canvas.</p> </li> <li>Parameters: None</li> <li> <p>Returns: None</p> </li> <li> <p><code>set_legend(self, legend)</code>: Sets the properties of the legend.</p> <ul> <li>Parameters:</li> <li><code>legend</code>: The TLegend object to be configured.</li> <li>Returns: None</li> </ul> </li> <li> <p><code>stack_format(self, stack)</code>: Sets the formatting for the stack of histograms.</p> <ul> <li>Parameters:</li> <li><code>stack</code>: The stack object to be formatted.</li> <li>Returns: None</li> </ul> </li> <li> <p><code>histogram_format(self, histogram, color, name)</code>: Sets the formatting for individual histograms.</p> <ul> <li>Parameters:</li> <li><code>histogram</code>: The histogram object to be formatted.</li> <li><code>color</code>: An integer representing the color of the histogram.</li> <li><code>name</code>: A string representing the name of the histogram.</li> <li>Returns: None</li> </ul> </li> <li> <p><code>create_labels(self, key, color)</code>: Creates labels for peaks found in the data.</p> <ul> <li>Parameters:</li> <li><code>key</code>: A string representing the key for the simulated data.</li> <li><code>color</code>: An integer representing the color of the label.</li> <li>Returns: None</li> </ul> </li> <li> <p><code>set_peaks(self, key)</code>: Fits peaks in the histogram data.</p> <ul> <li>Parameters:</li> <li><code>key</code>: A string representing the key for the simulated data.</li> <li>Returns: An array containing peak values.</li> </ul> </li> <li> <p><code>set_peak_labels(self, xpeaks, key, color)</code>: Sets the labels for the identified peaks.</p> <ul> <li>Parameters:</li> <li><code>xpeaks</code>: An array containing peak values.</li> <li><code>key</code>: A string representing the key for the simulated data.</li> <li><code>color</code>: An integer representing the color of the label.</li> <li>Returns: None</li> </ul> </li> <li> <p><code>set_peak_label(self, xpeak, key, color)</code>: Sets the properties of individual peak labels.</p> <ul> <li>Parameters:</li> <li><code>xpeak</code>: A peak value.</li> <li><code>key</code>: A string representing the key for the simulated data.</li> <li><code>color</code>: An integer representing the color of the label.</li> <li>Returns: None</li> </ul> </li> <li> <p><code>draw_label(self, label, color)</code>: Draws peak labels on the canvas.</p> <ul> <li>Parameters:</li> <li><code>label</code>: The label to be drawn.</li> <li><code>color</code>: An integer representing the color of the label.</li> <li>Returns: None</li> </ul> </li> <li> <p><code>canvas_cd(self, frec, index)</code>: Checks whether the frequency belongs to the specified range.</p> <ul> <li>Parameters:</li> <li><code>frec</code>: A frequency value to be checked.</li> <li><code>index</code>: The index corresponding to the xrange_divs.</li> <li>Returns: True if the frequency belongs to the specified range, False otherwise.</li> </ul> </li> <li> <p><code>label_format(self, label, refion, color)</code>: Sets the formatting for peak labels.</p> <ul> <li>Parameters:</li> <li><code>label</code>: The label to be formatted.</li> <li><code>refion</code>: A boolean indicating whether the label belongs to the reference ion.</li> <li><code>color</code>: An integer representing the color of the label.</li> <li>Returns: None</li> </ul> </li> <li> <p><code>add_legend(self, histogram, key)</code>: Adds histogram entries to the legend.</p> <ul> <li>Parameters:</li> <li><code>histogram</code>: The histogram object to be added to the legend.</li> <li><code>key</code>: A string representing the key for the simulated data.</li> <li>Returns: None</li> </ul> </li> <li> <p><code>save_pdf(self, name)</code>: Saves the canvas as a PDF file.</p> <ul> <li>Parameters:</li> <li><code>name</code>: The filename to save the PDF.</li> <li>Returns: None</li> </ul> </li> <li> <p><code>save_root(self, name)</code>: Saves the canvas as a ROOT file.</p> <ul> <li>Parameters:</li> <li><code>name</code>: The filename to save the ROOT file.</li> <li>Returns: None</li> </ul> </li> </ol>"},{"location":"importdata/","title":"importdata","text":""},{"location":"importdata/#importdata-documentation","title":"ImportData Documentation","text":"<p>The provided Python code defines a class <code>ImportData</code> that represents the Model component of the Model-View-Controller (MVC) design pattern. It is designed to handle the import and processing of experimental and simulated data for Schottky spectra analysis.</p>"},{"location":"importdata/#class-importdata","title":"Class: ImportData","text":""},{"location":"importdata/#constructor","title":"Constructor:","text":"<ul> <li><code>__init__(self, refion, alphap, filename=None)</code>: Constructor to initialize the ImportData object.</li> <li>Parameters:<ul> <li><code>refion</code>: A string representing the reference ion.</li> <li><code>alphap</code>: A floating-point number representing alpha value.</li> <li><code>filename</code>: (optional) A string representing the filename of the experimental data file.</li> </ul> </li> <li>Returns: None</li> </ul>"},{"location":"importdata/#methods","title":"Methods:","text":"<ol> <li><code>_set_particles_to_simulate_from_file(self, particles_to_simulate)</code>: Sets the particles to simulate based on the provided data.</li> <li>Parameters:<ul> <li><code>particles_to_simulate</code>: A list of particle data to be simulated.</li> </ul> </li> <li> <p>Returns: None</p> </li> <li> <p><code>_calculate_moqs(self, particles=None)</code>: Calculates the mass over charge (moq) for particles present in the LISE file or particles introduced.</p> </li> <li>Parameters:<ul> <li><code>particles</code>: (optional) A list of particle data for which moq needs to be calculated.</li> </ul> </li> <li> <p>Returns: None</p> </li> <li> <p><code>_calculate_srrf(self, moqs=None, fref=None, brho=None, ke=None, gam=None, correct=None)</code>: Calculates the simulated relative revolution frequencies (SRRF) based on provided parameters or using previously calculated moq values.</p> </li> <li>Parameters:<ul> <li><code>moqs</code>: (optional) A dictionary containing moq values for various ions.</li> <li><code>fref</code>: (optional) The reference frequency in Hz.</li> <li><code>brho</code>: (optional) The magnetic rigidity in T.m.</li> <li><code>ke</code>: (optional) The kinetic energy per nucleon in MeV/u.</li> <li><code>gam</code>: (optional) The Lorentz gamma factor.</li> <li><code>correct</code>: (optional) A polynomial coefficient for correcting the simulated frequencies.</li> </ul> </li> <li> <p>Returns: None</p> </li> <li> <p><code>_simulated_data(self, harmonics=None, particles=False)</code>: Simulates the measured frequency and expected yield for each harmonic.</p> </li> <li>Parameters:<ul> <li><code>harmonics</code>: (optional) A list of integers representing harmonics for simulation.</li> <li><code>particles</code>: A boolean indicating whether to simulate particle data.</li> </ul> </li> <li> <p>Returns: None</p> </li> <li> <p><code>reference_frequency(self, fref=None, brho=None, ke=None, gam=None)</code>: Calculates the reference frequency based on provided parameters or given conditions.</p> </li> <li>Parameters:<ul> <li><code>fref</code>: (optional) The reference frequency in Hz.</li> <li><code>brho</code>: (optional) The magnetic rigidity in T.m.</li> <li><code>ke</code>: (optional) The kinetic energy per nucleon in MeV/u.</li> <li><code>gam</code>: (optional) The Lorentz gamma factor.</li> </ul> </li> <li> <p>Returns: The calculated reference frequency in Hz.</p> </li> <li> <p><code>calc_ref_rev_frequency(ref_mass, ring_circumference, brho=None, ref_charge=None, ke=None, aa=None, gam=None)</code>: Calculates the reference revolution frequency based on provided parameters.</p> </li> <li>Parameters:<ul> <li><code>ref_mass</code>: The reference mass in atomic mass units (u).</li> <li><code>ring_circumference</code>: The circumference of the ring in meters (m).</li> <li><code>brho</code>: (optional) The magnetic rigidity in T.m.</li> <li><code>ref_charge</code>: (optional) The reference ion charge.</li> <li><code>ke</code>: (optional) The kinetic energy per nucleon in MeV/u.</li> <li><code>aa</code>: (optional) The atomic mass number of the reference ion.</li> <li><code>gam</code>: (optional) The Lorentz gamma factor.</li> </ul> </li> <li> <p>Returns: The calculated reference revolution frequency in Hz.</p> </li> <li> <p><code>gamma_brho(brho, charge, mass)</code>: Calculates the Lorentz gamma factor based on magnetic rigidity.</p> </li> <li>Parameters:<ul> <li><code>brho</code>: The magnetic rigidity in T.m.</li> <li><code>charge</code>: The charge of the particle.</li> <li><code>mass</code>: The mass of the particle in atomic mass units (u).</li> </ul> </li> <li> <p>Returns: The calculated Lorentz gamma factor.</p> </li> <li> <p><code>gamma_ke(ke, aa, ref_mass)</code>: Calculates the Lorentz gamma factor based on kinetic energy per nucleon.</p> </li> <li>Parameters:<ul> <li><code>ke</code>: The kinetic energy per nucleon in MeV/u.</li> <li><code>aa</code>: The atomic mass number of the reference ion.</li> <li><code>ref_mass</code>: The reference mass in atomic mass units (u).</li> </ul> </li> <li> <p>Returns: The calculated Lorentz gamma factor.</p> </li> <li> <p><code>beta(gamma)</code>: Calculates the beta factor based on the Lorentz gamma factor.</p> </li> <li>Parameters:<ul> <li><code>gamma</code>: The Lorentz gamma factor.</li> </ul> </li> <li> <p>Returns: The calculated beta factor.</p> </li> <li> <p><code>velocity(beta)</code>: Calculates the velocity of the particle based on the beta factor.</p> <ul> <li>Parameters:</li> <li><code>beta</code>: The beta factor of the particle.</li> <li>Returns: The calculated velocity in m/s.</li> </ul> </li> <li> <p><code>calc_revolution_frequency(velocity, ring_circumference)</code>: Calculates the revolution frequency of the particle based on its velocity and the circumference of the ring.</p> <ul> <li>Parameters:</li> <li><code>velocity</code>: The velocity of the particle in m/s.</li> <li><code>ring_circumference</code>: The circumference of the ring in meters (m).</li> <li>Returns: The calculated revolution frequency in Hz.</li> </ul> </li> <li> <p><code>gammat(alphap)</code>: Calculates the gamma_t factor based on the alpha parameter.</p> <ul> <li>Parameters:</li> <li><code>alphap</code>: The alpha parameter.</li> <li>Returns: The calculated gamma_t factor.</li> </ul> </li> <li> <p><code>read_psdata(filename, dbm=False)</code>: Reads the experimental data from a file.</p> <ul> <li>Parameters:</li> <li><code>filename</code>: The name of the file containing the experimental data.</li> <li><code>dbm</code>: A boolean indicating whether the file is in dBm format.</li> <li>Returns: A numpy array containing the experimental data (frequency and yield).</li> </ul> </li> </ol>"}]}